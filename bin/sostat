#!/bin/bash
#
# /usr/bin/sostat
#
# Written by:
# Doug Burks
# Fixes contributed by:
# Stephane Chazelas
# Shane Castle

# Determine if we're running Snort or Suricata
source /etc/nsm/securityonion.conf

# Define a banner to separate sections
banner="========================================================================="

# Check for root
[ "$(id -u)" -ne 0 ] && echo "This script must be run using sudo!" && exit 1

header() {
  printf '%s\n' "$banner" "$*" "$banner"
}

remove_ansi_escapes() {
  sed $'s/\e[^mk]*[mk]//g;s/[\e\r]//g'
}

# Determine sensor interfaces for packet loss stats
INTERFACES=`grep -v "#" /etc/nsm/sensortab | awk '{print $4}'`

# Text formatting
if [ -t 1 ];then
	underline=`tput smul`
	normal=`tput sgr0`
else
	:
fi

# Begin output
header "Service Status"
service nsm status 2>&1 | remove_ansi_escapes

echo
header "Interface Status"
ifconfig

echo
header "Link Statistics"
ip -s -s link

echo
header "Disk Usage"
df -h

echo
header "Network Sockets"
lsof -nP -i

if [ -f /var/log/nsm/pulledpork.log ]; then
	echo
	header "IDS Rules Update"
	date=$(date +'%a %b %_d')
	tail -n 1000 /var/log/nsm/pulledpork.log |
	  sed "/^$date/,\$!d;/./!d;/An error occurred: WARNING: /d" |
	  remove_ansi_escapes
fi

echo
PROCS=`nproc --all`
header "CPU Usage"
echo "Load average for the last 1, 5, and 15 minutes:"
cat /proc/loadavg | awk '{print $1,$2,$3}'
echo "Processing units: $PROCS"
echo "If load average is higher than processing units,"
echo "then tune until load average is lower than processing units."
echo
# Get the first six lines of top output (summary)
top -b -n1 |head -6
# Use "ps" to get a process listing and sort it by cpu usage
ps -eo pcpu,pmem,args --sort -pcpu

if [ -d /nsm/sensor_data ]; then
	echo
	FREQUENCY=`grep -A1 packets_received /var/ossec/etc/ossec.conf | tail -1 | cut -d\> -f2 | cut -d\< -f1`
	header "Packets received during last monitoring interval ($FREQUENCY seconds)"
	/usr/bin/sostat-interface-delta
	echo
	header "Packet Loss Stats"
	echo
	echo "${underline}NIC${normal}:"
	echo
	for IFACE in $INTERFACES;do
		echo "$IFACE:" && echo && echo `ifconfig $IFACE |awk '/dropped:/ {print $1,$2,$4}'` && echo ""
	done
	echo "-------------------------------------------------------------------------"
	echo
	if [ -f /proc/net/pf_ring/info ]; then
		echo "${underline}pf_ring${normal}:"
		for i in /proc/net/pf_ring/*-* ; do
			echo
			#echo $i
			grep "Appl. Name" $i
			grep "Tot Packets" $i
			grep "Tot Pkt Lost" $i
			echo
		done
	fi
	echo "-------------------------------------------------------------------------"
	echo
	echo "${underline}IDS Engine ($ENGINE) packet drops${normal}:"
	echo
	if [ "$ENGINE" = "suricata" ]; then
        for i in /nsm/sensor_data/*/stats.log; do
                echo "$i"
                if [ $( tail -n 50 $i | grep -c drop ) -ne 0 ]; then
			echo
			tail -n 50 "$i" | grep -e "Date: " -e "drop"
			echo
		else
			echo
			echo "No packet drops reported."
			echo
		fi
        done
        else
		for i in /nsm/sensor_data/*/snort-*.stats; do
			if grep -q '^[^#]' "$i"; then
				echo -n "$i last reported pkt_drop_percent as "
				grep -v '^#' "$i" |tail -n 1 |cut -d\, -f2
			else
				echo "ERROR: No stats found in $i"
			fi
		done
	fi
	echo "-------------------------------------------------------------------------"
	echo
        TMP=`mktemp`
        su sguil -c '/opt/bro/bin/broctl netstats' > $TMP
        if [ -s $TMP ]; then
                echo "${underline}Bro${normal}:"
                echo
		echo -n "Average packet loss as percent across all Bro workers: "
                cat $TMP | sed \
                's/[a-z]*=//g' | awk '{ drop += $4 ; link += $5 } \
                END { printf("%f\n", ((drop/NR) / (link/NR)) * 100) }'
                echo
                cat $TMP
                echo
                if [ -f /nsm/bro/logs/current/capture_loss.log ]; then
			echo "Capture Loss:"
			echo
			echo "`bro-cut peer percent_lost < /nsm/bro/logs/current/capture_loss.log | sort -u`"
			echo
			echo "If you are seeing capture loss without dropped packets, this"
			echo "may indicate that an upstream device is dropping packets (tap or SPAN port)."
		else
			echo "No capture loss reported."
		fi
		rm $TMP
	fi
	echo
	echo "-------------------------------------------------------------------------"
	if ls /var/log/nsm/*/netsniff-ng.log > /dev/null 2>&1; then
		echo
		echo "${underline}Netsniff-NG${normal}:"
		#awk 'BEGIN { RS="."; FS="/"; ORS="\n" } { if( $0 !~ /netsniff/ && substr( $2,2,length($2)-2 ) > 0 ) print "File:",FILENAME,"Processed:",$1,"Lost:",$2 }' /var/log/nsm/*/netsniff-ng.log | sed -e 's/(//' -e 's/)//' | column -t | grep -v "Lost:  -0"
		for i in /var/log/nsm/*/netsniff*; do egrep -v "^Executing|^RX|^Running|^Cannot set NIC flags" $i | sed 's|\.|\n|g' | sed 's|(||g' | sed 's|)||g' | sed 's|/| |g' | while read PROCESSED LOST; do echo "File: $i Processed: $PROCESSED Lost: $LOST"; done; done | column -t | grep -v "Processed:  Lost:" | grep -v "Lost:  -0"
		if [ $? -gt 0 ]; then
			echo
			echo "0 Loss"
		fi
	fi
	echo
	header "PF_RING"
        cat /proc/net/pf_ring/info
	echo
	header "Log Archive"
	for i in /nsm/sensor_data/*; do
		DAYS=`ls $i/dailylogs/ | wc -l`
		echo "$i/dailylogs/ - $DAYS days"
		cd $i/dailylogs
		du --max-depth=1 -h|sort -k2
		cd ->/dev/null
		echo
	done
	DAYS=`ls /nsm/bro/logs/ | grep -v current | grep -v stats | wc -l`
	echo "/nsm/bro/logs/ - $DAYS days"; cd /nsm/bro/logs/; du --max-depth=1 -h |sort -k2; cd ->/dev/null
fi
if [ -d /var/lib/mysql/securityonion_db ]; then
	echo
	header "Sguil Uncategorized Events"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "SELECT COUNT(*) FROM event WHERE status=0"
	echo
	header "Sguil events summary for yesterday"
	# List all sigs from yesterday that are not URLs captured by http_agent descending by count
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Totals, CONCAT(event.signature_gen, ':', event.signature_id) as 'GenID:SigID', event.signature as Signature from event where event.signature_gen != 10001 and event.signature_id != 420042 and event.timestamp<curdate() and event.timestamp>DATE_ADD(CURDATE(), INTERVAL -1 DAY) group by event.signature order by Totals desc;"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Total from event where event.signature_gen != 10001 and event.signature_id != 420042 and event.timestamp<curdate() and event.timestamp>DATE_ADD(CURDATE(), INTERVAL -1 DAY);"
	echo
	header "Top 50 All time Sguil Events"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Totals, CONCAT(event.signature_gen, ':', event.signature_id) as 'GenID:SigID', event.signature as Signature from event where event.signature_gen != 10001 and event.signature_id != 420042 group by event.signature order by Totals desc limit 50;"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Total from event where event.signature_gen != 10001 and event.signature_id != 420042;"
	# check for active http_agent
	num_http_agents=$(mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select * from sensor where agent_type='http' and active='Y';" | wc -l)
	if [ $num_http_agents -gt 0 ]; then
		echo
		header "Top 50 URLs for yesterday"
		mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Totals, event.signature as Signature from event where event.signature_gen = 10001 and event.signature_id = 420042 and event.timestamp<curdate() and event.timestamp>DATE_ADD(CURDATE(), INTERVAL -1 DAY) group by event.signature order by Totals desc limit 50;"
		mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "select count(*) as Total from event where event.signature_gen = 10001 and event.signature_id = 420042 and event.timestamp<curdate() and event.timestamp>DATE_ADD(CURDATE(), INTERVAL -1 DAY);"
	fi
fi

if [ -f /var/log/apt/history.log ]; then
	echo
	header "Last update"
	tail /var/log/apt/history.log
fi

if [ $(/usr/lib/update-notifier/apt-check --human-readable | grep -c '0') -ne 2 ]; then
        echo
        header "Available updates"
        /usr/lib/update-notifier/apt-check --human-readable
        echo
        echo "Run 'sudo soup' to install the latest updates."
fi

if [ -f /etc/nsm/securityonion.conf ] && source /etc/nsm/securityonion.conf && [ "$ELSA" = "YES" ]; then
        echo
        header "ELSA"
	echo "Syslog-ng"
        echo "Checking for process:"
	pgrep -af /usr/sbin/syslog-ng
        echo "Checking for connection:"
	nc -4 -vz localhost 514 2>&1
	echo
        echo "MySQL"
        echo "Checking for process:"
        pgrep -af /usr/sbin/mysqld
        echo "Checking for connection:"
        [ -d /var/lib/mysql/securityonion_db ] && nc -4 -vz localhost 3306 2>&1 || nc -4 -vz localhost 50000 2>&1
        echo
        echo "Sphinx"
        echo "Checking for process:"
        pgrep -af /usr/bin/searchd
        echo "Checking for connection:"
        nc -4 -vz localhost 9306 2>&1
        echo
        echo "ELSA Buffers in Queue:"
        ls -alt /nsm/elsa/data/elsa/tmp/buffers/* | wc -l
	echo "If this number is consistently higher than 20, please see:"
	echo "https://github.com/Security-Onion-Solutions/security-onion/wiki/FAQ#why-does-sostat-show-a-high-number-of-elsa-buffers-in-queue"
        echo
        echo "ELSA Directory Sizes:"
        du --max-depth=0 -h /nsm/elsa/data /var/lib/mysql/syslog /var/lib/mysql/syslog_data
        echo
	OFFSET="2"
	if [ -f /etc/elsa_web.conf ] && grep default_start_time_offset /etc/elsa_web.conf >/dev/null 2>&1; then
		OFFSET=`grep default_start_time_offset /etc/elsa_web.conf | awk '{print $2}' | cut -d, -f1`
	fi
	echo "ELSA Index Date Range"
	echo "If you don't have at least $OFFSET full days of logs in the Index Date Range,"
	echo "then you'll need to increase log_size_limit in /etc/elsa_node.conf."
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsyslog -e "SELECT MIN(start), MAX(end) FROM syslog.v_indexes"
	echo
        if [ -d /var/lib/mysql/securityonion_db ]; then
                # Master server
		if grep "http://127.0.0.1:50" /etc/elsa_web.conf >/dev/null 2>&1; then
                	echo "ELSA Log Node SSH Tunnels:"
			(echo "PORT NODE IP/STATUS"
			grep "http://127.0.0.1:50" /etc/elsa_web.conf | awk '{print $2}' | cut -d\/ -f3 | sort | while read PORT; do
				NAME=$(grep -B1 $PORT /etc/elsa_web.conf | head -1 | cut -d\" -f2)
				PORT_ONLY=$(echo $PORT | cut -d\: -f2)
				if lsof -nP -i |grep "$PORT (LISTEN)" >/dev/null 2>&1; then
					lsof -nP -i |grep "$PORT (LISTEN)" | awk '{print $9,$2}' | while read PORT PID; do
						IP=`lsof -nP -i |grep "^sshd" | awk '{print $2,$9}' |grep "^$PID" |grep ":22" |awk '{print $2}' |cut -d\> -f2 | cut -d\: -f1 | head -1`
						echo "$PORT_ONLY $NAME $IP"
					done
				else 
					echo "$PORT_ONLY $NAME DISCONNECTED";
				fi
			done) | column -t
		fi
        else
                # ELSA Log Node
                echo "autossh"
                echo "Checking for process:"
                pgrep -af autossh
                echo
                echo "Checking APIKEY:"
                APIKEY=`grep '"apikey": "' /etc/elsa_web.conf | awk '{print $2}' | sed 's|"||g'`
                source /root/.ssh/securityonion_ssh.conf
                APIKEY_REMOTE=`ssh $SSH_USERNAME@$SERVERNAME -i /root/.ssh/securityonion grep -A2 $ELSA_PORT /etc/elsa_web.conf | grep apikey | awk '{print $2}' | sed 's|"||g'`
                [ "$APIKEY" = "$APIKEY_REMOTE" ] && echo "APIKEY matches server." || echo "APIKEY not found on master server."
                echo
                echo "starman"
                echo "Checking for processes:"
                pgrep -af starman
        fi
fi

if [ -f /etc/timezone ] && ! grep "Etc/UTC" /etc/timezone >/dev/null 2>&1; then
	echo
	header "Time Zone"
	echo "WARNING! Timezone is NOT set to UTC!"
	echo "Please see:"
	echo "https://github.com/Security-Onion-Solutions/security-onion/wiki/TimeZones"
fi
