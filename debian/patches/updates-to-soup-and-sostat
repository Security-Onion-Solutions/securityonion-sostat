Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-sostat (20120722-0ubuntu0securityonion21) precise; urgency=low
 .
   * Issue 481: soup: Add skip interactive option
   * Issue 494: sostat should display ELSA v_indexes
   * Issue 483: sostat-redacted should redact usernames
   * Issue 497: sostat should ignore "Cannot set NIC flags!" in netsniff-ng.log
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-sostat-20120722.orig/bin/sostat
+++ securityonion-sostat-20120722/bin/sostat
@@ -67,7 +67,10 @@ fi
 
 echo
 header "CPU Usage"
-top -b -n1
+# Get the first six lines of top output (summary)
+top -b -n1 |head -6
+# Use "ps" to get a process listing and sort it by cpu usage
+ps -eo pcpu,pmem,args --sort -pcpu
 
 if [ -d /nsm/sensor_data ]; then
 	echo
@@ -133,7 +136,7 @@ if ls /var/log/nsm/*/netsniff-ng.log > /
         echo
         header "Netsniff-NG - Reported Packet Loss (per interval)"
  	#awk 'BEGIN { RS="."; FS="/"; ORS="\n" } { if( $0 !~ /netsniff/ && substr( $2,2,length($2)-2 ) > 0 ) print "File:",FILENAME,"Processed:",$1,"Lost:",$2 }' /var/log/nsm/*/netsniff-ng.log | sed -e 's/(//' -e 's/)//' | column -t | grep -v "Lost:  -0"
-	for i in /var/log/nsm/*/netsniff*; do egrep -v "^Executing|^RX|^Running" $i | sed 's|\.|\n|g' | sed 's|(||g' | sed 's|)||g' | sed 's|/| |g' | while read PROCESSED LOST; do echo "File: $i Processed: $PROCESSED Lost: $LOST"; done; done | column -t | grep -v "Processed:  Lost:" | grep -v "Lost:  -0"
+	for i in /var/log/nsm/*/netsniff*; do egrep -v "^Executing|^RX|^Running|^Cannot set NIC flags" $i | sed 's|\.|\n|g' | sed 's|(||g' | sed 's|)||g' | sed 's|/| |g' | while read PROCESSED LOST; do echo "File: $i Processed: $PROCESSED Lost: $LOST"; done; done | column -t | grep -v "Processed:  Lost:" | grep -v "Lost:  -0"
 	if [ $? -gt 0 ]; then
 		echo "0 Loss"
 	fi
@@ -197,6 +200,9 @@ if [ -f /etc/nsm/securityonion.conf ] &&
         echo "ELSA Directory Sizes:"
         du --max-depth=0 -h /nsm/elsa/data /var/lib/mysql/syslog /var/lib/mysql/syslog_data
         echo
+	echo "ELSA Date Range:"
+	mysql -uroot -Dsyslog -e "SELECT MIN(start), MAX(end) FROM syslog.v_indexes"
+	echo
         if [ -d /var/lib/mysql/securityonion_db ]; then
                 # Master server
                 echo "ELSA Log Node SSH Tunnels:"
--- securityonion-sostat-20120722.orig/bin/soup
+++ securityonion-sostat-20120722/bin/soup
@@ -12,6 +12,12 @@ BANNER="################################
 # so we might as well reboot to bring all services back up.
 REBOOT=no
 
+# Skip interactive key presses
+SKIP=0
+
+# Log to file
+LOG=0
+
 #########################################
 # Got r00t?
 #########################################
@@ -21,22 +27,67 @@ if [[ $(/usr/bin/id -u) -ne 0 ]]; then
 fi
 
 #########################################
+# Options
+#########################################
+
+usage()
+{
+cat <<EOF
+
+Security Onion Update
+
+     Options:
+
+        -h      	This message
+	-l <file> 	Log stdout and stderr to specified file (Use with \`\`-y'')
+	-y		Skip interactive mode
+
+Usage: $0
+EOF
+}
+
+while getopts "hl:y" OPTION
+do
+     case $OPTION in
+         h)
+	     usage
+             exit 0
+             ;;
+	 l)
+	     LOG=1
+             LOGFILE="$OPTARG"
+             ;;
+         y)
+             SKIP=1
+             ;;
+     esac
+done
+
+if [ $LOG -eq 1 ]; then
+#	exec > >(tee "$LOGFILE") 2>&1
+	echo -e "\n --> Logging stdout & stderr to $LOGFILE"
+	exec > "$LOGFILE" 2>&1
+fi
+
+#########################################
 # UPDATE!
 #########################################
 
-# Prompt user to continue
-echo $BANNER
-echo "This script will automatically install all available updates."
-echo ""
-echo "If mysql-server updates are available, it will stop sensor processes"
-echo "to ensure a clean update."
-echo ""
-echo "At the end of the script, if mysql-server and/or kernel updates"
-echo "were installed, you will be prompted to reboot."
-echo $BANNER
-echo ""
-echo "Press Enter to continue or Ctrl-C to cancel."
-read input
+if [ $SKIP -ne 1 ]; then
+	# Prompt user to continue
+	echo $BANNER
+	echo "This script will automatically install all available updates."
+	echo ""
+	echo "If mysql-server updates are available, it will stop sensor processes"
+	echo "to ensure a clean update."
+	echo ""
+	echo "At the end of the script, if mysql-server and/or kernel updates"
+	echo "were installed, you will be prompted to reboot."
+	echo $BANNER
+	echo ""
+	echo "Press Enter to continue or Ctrl-C to cancel."
+	read input
+fi
 
 # Sync with mirrors
 apt-get update
@@ -73,7 +124,9 @@ echo "All updates have been installed."
 
 # If we need to reboot, give the user a chance to cancel.
 if [ $REBOOT == "yes" ]; then
-	echo "Press Enter to reboot or Ctrl-C to cancel."
-	read input
+	if [ $SKIP -ne 1 ]; then
+		echo "Press Enter to reboot or Ctrl-C to cancel."
+		read input
+	fi
 	reboot
 fi
